generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch", "fulltextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum UserType {
  ADMIN
  CUSTOMER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
}


enum WalletSetupStatus {
  PENDING
  ACTIVE
}


enum TransactionType {
  WALLET_FUND
}


enum TransactionStatus {
  PENDING
  SUCCESS
  APPROVED
  FAILED
  DECLINED
}

enum PaymentChannel {
  WALLET
  PAYSTACK
}


enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

// Models
model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  identifier        String             @unique
  firstName         String
  lastName          String
  email             String             @unique
  phone             String?
  password          String
  userType          UserType
  photo             String?
  gender            Gender?
  status            Status             @default(ACTIVE)
  transactionPin    String?
  ipAddress         String?
  isVerified        Boolean            @default(true)
  isWalletCreated   Boolean            @default(false)
  isDeleted         Boolean?           @default(false)
  walletSetupStatus WalletSetupStatus?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastLogin         DateTime?
  loginCount        Int                @default(0)

  wallet               Wallet?
  passwordResetRequest PasswordResetRequest?

  @@fulltext([firstName, lastName])
  @@map("Users")
}

model PasswordResetRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("PasswordResetRequests")
}


model Wallet {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique @db.ObjectId
  walletNumber     String   @unique
  availableBalance Float    @default(0)
  bookBalance      Float    @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("Wallets")
}
